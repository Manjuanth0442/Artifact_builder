{"type": "PlanScript", "uri": null, "category": null, "eTag": null, "created": null, "modified": null, "id": "24612e29-dfba-4ad1-97d0-ebbb07a1d12a", "name": "HPE-RHEL-Network", "description": "Configures Multi NIC's", "status": null, "state": null, "planType": "deploy", "content": "# (c) Copyright 2018-2019 Hewlett Packard Enterprise Development LP\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software distributed\n# under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n# CONDITIONS OF ANY KIND, either express or implied. See the License for the\n# specific language governing permissions and limitations under the License.\n\n#Child script for NIC Teaming.\nupload -<<END /EFI/HPE/isdeploy/tmp/Mgmt-NIC-bonding.bash\n#! /bin/bash\nteam_name=$1\nnet1_mac=$2\nnet2_mac=$3\nvlan=$4\nnet1_ip=$5\nnet1_gw=$6\ndomain=$7\ndns1=$8\ndns2=$9\nnetmask=${10}\n\nmask2cidr() {\n    nbits=0\n    IFS=.\n    for dec in $1 ; do\n        case $dec in\n            255) let nbits+=8;;\n            254) let nbits+=7;;\n            252) let nbits+=6;;\n            248) let nbits+=5;;\n            240) let nbits+=4;;\n            224) let nbits+=3;;\n            192) let nbits+=2;;\n            128) let nbits+=1;;\n            0);;\n            *) echo \"Error: $dec is not recognised\"; exit 1\n        esac\n    done\n    echo \"$nbits\"\n}\n\n\n#Check the maching interface names for mac addresses.\n\n interfaces=`ls /sys/class/net/`\n for iface in $interfaces\n do\n  mac=`cat /sys/class/net/$iface/address`\n  if [ ${mac,,} == ${net1_mac,,} ]\n  then\n   nic1=$iface\n  elif [ ${mac,,} == ${net2_mac,,} ]\n  then\n   nic2=$iface\n  fi\n done\n\t\n#Add $team_name connection.\n\nport1=$(nmcli con | grep $nic1 |  awk '{ print $1 }')\nport2=$(nmcli con | grep $nic2 |  awk '{ print $1 }')\nif [ -z $port1 ] && [ -z $port2 ]\nthen\n\n  nmcli connection add type team con-name $team_name ifname $team_name config '{\"runner\": {\"name\": \"activebackup\"}, \"link_watch\": {\"name\": \"ethtool\"}}'\n  nmcli connection add type team-slave con-name $team_name-port1 ifname $nic1 master $team_name\n  nmcli connection add type team-slave con-name $team_name-port2 ifname $nic2 master $team_name\nelse\n  team_name=$(echo $port1 | cut -f1 -d-)\n  echo \"using team_name: $team_name\"\nfi\n\nif [[ -z $net1_ip ]]\nthen\n echo \"Configure $team_name for DHCP\"\n if [ $vlan -ne 0 ];then\n  echo \"Configure $team_name for DHCP with vlan tag $vlan\"\n#  nmcli connection modify $team_name ipv6.method ignore\n  nmcli connection add type vlan con-name $team_name-vlan$vlan ifname $team_name.$vlan id $vlan dev $team_name\n fi\n\nelse\n \n if [ $vlan -ne 0 ];then\n  echo \"Configure $team_name for static with vlan tag $vlan.\"\n#  nmcli connection modify $team_name ipv6.method ignore\n  nmcli connection add type vlan con-name $team_name-vlan$vlan ifname $team_name.$vlan id $vlan dev $team_name ip4 $net1_ip/$(mask2cidr $netmask) gw4 $net1_gw\n else\n  echo \"Configure $team_name for static\"\n  nmcli connection modify $team_name ipv4.addresses $net1_ip/$(mask2cidr $netmask) ipv4.gateway $net1_gw ipv4.method manual\n\n fi \ncat <<CONF>/etc/resolv.conf \n# Generated by Image Streamer\nsearch $domain\nnameserver $dns1\nnameserver $dns2\nCONF\n\ncat <<CONF>/etc/sysconfig/network\n#This file has been modified by Image Streamer.\nNETWORKING=yes\nGATEWAY=$net1_gw \nCONF\n\nfi\n\nnmcli connection up $team_name\n\nexit 0\nEND\n\n\n#Parent script for NIC Teaming.\n\nupload -<<END /EFI/HPE/isdeploy/scripts/04Mgmt-bonding-configuration.bash\n#! /bin/bash\nteam_count=@TotalNICTeamings:1@\nteam0=@NICTeam0Name:team0@\nteam1=@NICTeam1Name:team1@\necho \"Script Started for Teaming\"\n\nISROOT=\"/boot/efi/EFI/HPE/isdeploy\"\n\ncat <<'CONF'> /boot/efi/EFI/HPE/isdeploy/tmp/interface_names\necho \" Making This Directory to Test\"\nCONF\n\nfor i in `seq 1 $team_count`\ndo\n\tif [ $i -eq 1 ];then\n\t\techo $team0 > ${ISROOT}/tmp/interface_names\n\t\tif [[ \"@Team0NIC1.ipaddress@\" =~ [0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]* ]]; then\n\t\t\tsh ${ISROOT}/tmp/Mgmt-NIC-bonding.bash $team0 @Team0NIC1.mac@ @Team0NIC2.mac@ @Team0NIC1.vlanid@ @Team0NIC1.ipaddress@ @Team0NIC1.gateway@ @Team0NIC1.domain@ @Team0NIC1.dns1@ @Team0NIC1.dns2@ @Team0NIC1.netmask@ \n\t\t\techo Team0NIC2_vlan:@Team0NIC2.vlanid@\n\t\telse\n\t\t\tsh ${ISROOT}/tmp/Mgmt-NIC-bonding.bash $team0 @Team0NIC1.mac@ @Team0NIC2.mac@ @Team0NIC1.vlanid@\n\t\t\techo Team0NIC2_vlan:@Team0NIC2.vlanid@\n\t\tfi\n\telif [ $i -eq 2 ];then\n\t\techo $team1 >> ${ISROOT}/tmp/interface_names \n\t\tif [[ \"@Team1NIC1.ipaddress@\" =~ [0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]* ]]; then\n\t\t\tsh ${ISROOT}/tmp/Mgmt-NIC-bonding.bash $team1 @Team1NIC1.mac@ @Team1NIC2.mac@ @Team1NIC1.vlanid@ @Team1NIC1.ipaddress@ @Team1NIC1.gateway@ @Team1NIC1.domain@ @Team1NIC1.dns1@ @Team1NIC1.dns2@ @Team1NIC1.netmask@ \n\t\t\tTeam1NIC2_vlan:@Team1NIC2.vlanid@\n\t\telse\n\t\t\tsh ${ISROOT}/tmp/Mgmt-NIC-bonding.bash $team1 @Team1NIC1.mac@ @Team1NIC2.mac@ @Team1NIC1.vlanid@\n\t\t\techo Team1NIC2_vlan:@Team1NIC2.vlanid@\n\t\tfi\n\tfi\ndone\n\n\necho \"Configured bonding successfully\"\n\nEND", "customAttributes": null, "hpProvided": true, "dependentArtifacts": null}